@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ISTU_MFC.ViewModels.ServiceConstructorViewModel
@{
    Layout = "_LayoutEmployees";
    ViewData["Title"] = "DocGenerator";
}


<form asp-action="ServiceConstructorOnAddFile" method="post" enctype="multipart/form-data" hidden="@Model.IsHasDoc">
    <input name="model" value="@Model" style="display: none"/><br>
    <input type="file" name="uploadedFile" accept=".docx" required="required"/><br>
    <input type="submit" value="Загрузить" />
</form>
<div class="justify-content-between">
    <object>
        <div id="word-container" class="word-container"></div>
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script type="text/javascript" src="https://unpkg.com/jszip/dist/jszip.min.js"></script>
        <script src="~/Scripts/docx-preview.js"></script>
        @{
            if (Model.IsHasDoc)
            {
                <script>
                    window.onload = function ()
                    {
                        openDoc('@Model.PathToPreviewDoc')
                    }
                </script>
            }
        }

        <script type="text/javascript">
             function openDoc (path) {
                    $.ajax({
                        method: "post",
                        url: '@Url.Action("GetWordDocument","Employees")',
                        dataType: 'json', 
                        data: { "path": path },
                        success: function (data) {
                            //Convert Base64 string to Byte Array.
                            var bytes = Base64ToBytes(data);
                            //Convert BLOB to File object.
                            var doc = new File([bytes], "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
                            //If Document not NULL, render it.
                            if (doc != null) {
                                //Set the Document options.
                                var docxOptions = Object.assign(docx.defaultOptions, {
                                    useMathMLPolyfill: true
                                });
                                //Reference the Container DIV.
                                var container = document.querySelector("#word-container");
                                //Render the Word Document.
                                docx.renderAsync(doc, container, null, docxOptions);
                            }
                        },
                        error: function (err){
                                alert("Ошибка")
                                alert(err.status + err.statusText);
                            }
                    });
                }
                function Base64ToBytes(base64) {
                    try{
                        var s = window.atob(base64);
                        }
                    catch (e) {
                      alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
                    }
                    
                    var bytes = new Uint8Array(s.length);
                    for (var i = 0; i < s.length; i++) {
                        bytes[i] = s.charCodeAt(i);
                    }
                    return bytes;
                };
        </script>
    </object>
    @{
        if (Model.IsHasDoc)
        {
            <div name="listOfFields">
                <form asp-action="ServiceConstructorOnViewDoc" method="post" enctype="multipart/form-data">
                    @foreach (var field in Model.FormFields)
                    {
                        <div class="justify-content-between">
                            <div>@field.Name: </div>
                            <input name="names" value="@field.Name" type="hidden"/>
                            @{
                                Dictionary<SelectListGroup, List<SelectListItem>> selectListView = new Dictionary<SelectListGroup, List<SelectListItem>>();
                                foreach (var selectListItem in field.SelectList)
                                {
                                    var selectListGroup = selectListItem.Group;
                                    if (selectListGroup == null) selectListGroup = new SelectListGroup() { Name = "none" };
                                    if (!selectListView.ContainsKey(selectListGroup))
                                    {
                                        selectListView.Add(selectListGroup, new List<SelectListItem>());
                                    }
                                    selectListView[selectListGroup].Add(selectListItem);
                                }
                            }
                            <select name="fields">
                                @foreach (var item in selectListView)
                                {
                                    @if (item.Key.Name != "none")
                                    {
                                        <optgroup label="@item.Key.Name">>
                                            @foreach (var select in item.Value)
                                            {
                                                if (select.Value == field.SelectedType)
                                                {
                                                    <option value="@select.Value" selected="selected">@select.Text</option>
                                                }
                                                else
                                                {
                                                    <option value="@select.Value">@select.Text</option>
                                                }
                                            }
                                        </optgroup>
                                    }
                                    else
                                    {
                                        @foreach (var select in item.Value)
                                        {
                                            if (select.Value == field.SelectedType)
                                            {
                                                <option value="@select.Value" selected="selected">@select.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@select.Value">@select.Text</option>
                                            }
                                        }
                                    }

                                }
                            </select>
                            <button type="button" onclick="debugAll('@field.Text')">S</button>
                            <br/>
                        </div>

                    }
                    @Html.Hidden("pathToPreviewDoc", Model.PathToPreviewDoc)
                    @Html.Hidden("pathToOutputDoc", Model.PathToOutputDoc)
                    @Html.Hidden("pathToFormDoc", Model.PathToFormDoc)
                    <br/><br/><input type="submit" value="Отобразить документ"/>
                </form>
            </div>
        }
    }
</div>
<script src="https://colorjs.io/dist/color.global.js"></script>
<script>
function debugAll(nameView){
    $("div.word-container").find("span").each (function (index){
        console.log("Name = [" + nameView + "]")
        console.log((this).innerText)
           if((this).innerText === nameView){
                $(this).addClass("blink")
                setTimeout(() => {
                    $(this).removeClass("blink") 
                }, 2000)
           }
        })
        
}
</script>