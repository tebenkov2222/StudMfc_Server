@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ISTU_MFC.ViewModels.DocGenerationViewModel
@{
    Layout = "_LayoutEmployees";
    ViewData["Title"] = "DocGenerator";
}


<form asp-action="AddFile" method="post" enctype="multipart/form-data" hidden="@Model.IsHasDoc">
    <input name="model" value="@Model" style="display: none"/><br>
    <input type="file" name="uploadedFile" required="required"/><br>
    <input type="submit" value="Загрузить" />
</form>
@{
    string s = "display: flex";
    if (!Model.IsHasDoc)
        s = "display: none";
}
<div class="justify-content-between" style="@s">
    <object>
        @*<div id="pdf_container"></div>*@
        <div id="word-container" class=""></div>
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script type="text/javascript" src="https://unpkg.com/jszip/dist/jszip.min.js"></script>
        <script src="~/Scripts/docx-preview.js"></script>
        @{
            if (Model.IsHasDoc)
            {
                <script>
                    window.onload = function ()
                    {
                        openDoc('@Model.PathToPreviewDoc')
                    }
                </script>
            }
        }
        
        <script type="text/javascript">
            function openDoc (path) {
                $.ajax({
                    method: "post",
                    url: '@Url.Action("GetWordDocument","Employees")',
                    dataType: 'json', 
                    data: { "path": path },
                    success: function (data) {
                        //Convert Base64 string to Byte Array.
                        var bytes = Base64ToBytes(data);
                        //Convert BLOB to File object.
                        var doc = new File([bytes], "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
                        //If Document not NULL, render it.
                        if (doc != null) {
                            //Set the Document options.
                            var docxOptions = Object.assign(docx.defaultOptions, {
                                useMathMLPolyfill: true
                            });
                            //Reference the Container DIV.
                            var container = document.querySelector("#word-container");
                            //Render the Word Document.
                            docx.renderAsync(doc, container, null, docxOptions);
                        }
                    },
                    error: function (err){
                            alert("Ошибка")
                            alert(err.status + err.statusText);
                        }
                });
            }
            function Base64ToBytes(base64) {
                try{
                    var s = window.atob(base64);
                    }
                catch (e) {
                  alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
                }
                
                var bytes = new Uint8Array(s.length);
                for (var i = 0; i < s.length; i++) {
                    bytes[i] = s.charCodeAt(i);
                }
                return bytes;
            };
        </script>
        @*
        <script>
            window.onload = function (){
                LoadPdfFromUrl('@Url.Content(@Model.RelativePathToPreviewDoc)')
                }
        </script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"></script>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf_viewer.min.css" rel="stylesheet" type="text/css"/>
        <script type="text/javascript">
            var pdfjsLib = window['pdfjs-dist/build/pdf'];
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
            var pdfDoc = null;
            var scale =     2; //Set Scale for zooming PDF.
            var resolution = 1; //Set Resolution to Adjust PDF clarity.
     
            function LoadPdfFromUrl(url) {
                //Read PDF from URL.
                pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
                    pdfDoc = pdfDoc_;
     
                    //Reference the Container DIV.
                    var pdf_container = document.getElementById("pdf_container");
                    pdf_container.style.display = "block";
     
                    //Loop and render all pages.
                    for (var i = 1; i <= pdfDoc.numPages; i++) {
                        RenderPage(pdf_container, i);
                    }
                });
            };
            function RenderPage(pdf_container, num) {
                pdfDoc.getPage(num).then(function (page) {
                    //Create Canvas element and append to the Container DIV.
                    var canvas = document.createElement('canvas');
                    canvas.id = 'pdf-' + num;
                    ctx = canvas.getContext('2d');
                    pdf_container.appendChild(canvas);
     
                    //Create and add empty DIV to add SPACE between pages.
                    var spacer = document.createElement("div");
                    spacer.style.height = "20px";
                    pdf_container.appendChild(spacer);
     
                    //Set the Canvas dimensions using ViewPort and Scale.
                    var viewport = page.getViewport({ scale: scale });
                    canvas.height = resolution * viewport.height;
                    canvas.width = resolution * viewport.width;
     
                    //Render the PDF page.
                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport,
                        transform: [resolution, 0, 0, resolution, 0, 0]
                    };
     
                   page.render(renderContext);
                });
            };
        </script>*@
    </object>
    @{
        if (Model.IsHasDoc)
        {
            <div name="listOfFields">
                <form asp-action="ViewDocumentOnDocGeneration" method="post" enctype="multipart/form-data">
                    @foreach (var field in Model.FormFields)
                    {
                        <div class="justify-content-between">
                            <div>@field.Name: </div>
                            <input name="names" value="@field.Name" type="hidden"/>
                            @{
                                Dictionary<SelectListGroup, List<SelectListItem>> selectListView = new Dictionary<SelectListGroup, List<SelectListItem>>();
                                foreach (var selectListItem in field.SelectList)
                                {
                                    var selectListGroup = selectListItem.Group;
                                    if (selectListGroup == null) selectListGroup = new SelectListGroup() { Name = "none" };
                                    if (!selectListView.ContainsKey(selectListGroup))
                                    {
                                        selectListView.Add(selectListGroup, new List<SelectListItem>());
                                    }
                                    selectListView[selectListGroup].Add(selectListItem);
                                }
                            }
                            <select name="fields">
                                @foreach (var item in selectListView)
                                {
                                    @if (item.Key.Name != "none")
                                    {
                                        <optgroup label="@item.Key.Name">>
                                            @foreach (var select in item.Value)
                                            {
                                                if (select.Value == field.SelectedType)
                                                {
                                                    <option value="@select.Value" selected="selected">@select.Text</option>
                                                }
                                                else
                                                {
                                                    <option value="@select.Value">@select.Text</option>
                                                }
                                            }
                                        </optgroup>
                                    }
                                    else
                                    {
                                        @foreach (var select in item.Value)
                                        {
                                            if (select.Value == field.SelectedType)
                                            {
                                                <option value="@select.Value" selected="selected">@select.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@select.Value">@select.Text</option>
                                            }
                                        }
                                    }

                                }
                            </select>
                            <br/>
                        </div>

                    }
                    @Html.Hidden("pathToPreviewDoc", Model.PathToPreviewDoc)
                    @Html.Hidden("pathToOutputDoc", Model.PathToOutputDoc)
                    @Html.Hidden("pathToFormDoc", Model.PathToFormDoc)
                    <br/><br/><input type="submit" value="Отобразить документ"/>
                </form>
            </div>
        }
    }
</div>