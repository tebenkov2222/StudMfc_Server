@model ISTU_MFC.ViewModels.ServiceConstructorViewModel

@{
    Layout = "_LayoutEmployees";
    ViewData["Title"] = "ServiceConstructor";
}
@switch (@Model.State)
{
    case "Info":
        <div class="alert-success alert-box">
            <p>Тут короче описание того, че происходит на этой странице и какого ответственность данного этапа.</p>
            <p>Создание шаблона состоит нескольких этапов</p>
            <p>1. Выбор бланка заявлений в качестве будущего шаблона</p>
            <p>2. Создание шаблона из бланка заявлений</p>
            <p>3. Описание файлов для генерации и скачивания файлов</p>
            <p>4. Название и описание услуги, где будет присутствовать данный файл</p>
            <p></p>
            <p style="margin: 0">Чтобы начать нажмите на кнопку "Начать"</p>
        </div>

        <form asp-action="ServiceConstructorOnStart" method="post" enctype="multipart/form-data">
            <input type="submit" value="Начать"/>
        </form>
        break;
    case "SelectFile":
        <form asp-action="ServiceConstructorOnAddFile" method="post" enctype="multipart/form-data">
            <input name="model" value="@Model" style="display: none"/><br>
            <input type="file" name="uploadedFile" accept=".docx" required="required"/><br>
            <input type="submit" value="Загрузить"/>
        </form>
        break;
    case "ChangeFile":
        <div class="justify-content-between d-flex">
        <object>
            <div id="word-container" class="word-container"></div>
            <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
            <script type="text/javascript" src="https://unpkg.com/jszip/dist/jszip.min.js"></script>
            <script src="~/Scripts/docx-preview.js"></script>
            @{
                if (Model.IsHasDoc)
                {
                    <script>
                        window.onload = function ()
                        {
                            openDoc('@Model.PathToPreviewDoc')
                        }
                    </script>
                }
            }
            <script type="text/javascript">
                 function openDoc (path) {
                        $.ajax({
                            method: "post",
                            url: '@Url.Action("GetWordDocument","Employees")',
                            dataType: 'json', 
                            data: { "path": path },
                            success: function (data) {
                                //Convert Base64 string to Byte Array.
                                var bytes = Base64ToBytes(data);
                                //Convert BLOB to File object.
                                var doc = new File([bytes], "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
                                //If Document not NULL, render it.
                                if (doc != null) {
                                    //Set the Document options.
                                    var docxOptions = Object.assign(docx.defaultOptions, {
                                        useMathMLPolyfill: true
                                    });
                                    //Reference the Container DIV.
                                    var container = document.querySelector("#word-container");
                                    //Render the Word Document.
                                    docx.renderAsync(doc, container, null, docxOptions);
                                }
                            },
                            error: function (err){
                                    alert("Ошибка")
                                    alert(err.status + err.statusText);
                                }
                        });
                    }
                    function Base64ToBytes(base64) {
                        try{
                            var s = window.atob(base64);
                            }
                        catch (e) {
                          alert('Ошибка ' + e.name + ":" + e.message + "\n" + e.stack);
                        }
                        
                        var bytes = new Uint8Array(s.length);
                        for (var i = 0; i < s.length; i++) {
                            bytes[i] = s.charCodeAt(i);
                        }
                        return bytes;
                    }
            </script>
        </object>
        @{
            if (Model.IsHasDoc)
            {
                <div name="listOfFields">
                    <form method="post" enctype="multipart/form-data">
                        @foreach (var field in Model.FormFields)
                        {
                            <div>@field.Name</div>
                            <div class="d-flex justify-content-between">
                                
                                <input name="names" value="@field.Name" type="hidden"/>
                                @{
                                    Dictionary<SelectListGroup, List<SelectListItem>> selectListView = new Dictionary<SelectListGroup, List<SelectListItem>>();
                                    foreach (var selectListItem in field.SelectList)
                                    {
                                        var selectListGroup = selectListItem.Group;
                                        if (selectListGroup == null) selectListGroup = new SelectListGroup() { Name = "none" };
                                        if (!selectListView.ContainsKey(selectListGroup))
                                        {
                                            selectListView.Add(selectListGroup, new List<SelectListItem>());
                                        }
                                        selectListView[selectListGroup].Add(selectListItem);
                                    }
                                }
                                <select name="fields">
                                    @foreach (var item in selectListView)
                                    {
                                        @if (item.Key.Name != "none")
                                        {
                                            <optgroup label="@item.Key.Name">>
                                                @foreach (var select in item.Value)
                                                {
                                                    if (select.Value == field.SelectedType)
                                                    {
                                                        <option value="@select.Value" selected="selected">@select.Text</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@select.Value">@select.Text</option>
                                                    }
                                                }
                                            </optgroup>
                                        }
                                        else
                                        {
                                            @foreach (var select in item.Value)
                                            {
                                                if (select.Value == field.SelectedType)
                                                {
                                                    <option value="@select.Value" selected="selected">@select.Text</option>
                                                }
                                                else
                                                {
                                                    <option value="@select.Value">@select.Text</option>
                                                }
                                            }
                                        }

                                    }
                                </select>
                                <button type="button" class="service-list-btn" onclick="debugAll('@field.Text')"><i class="fas fa-search"></i></button>
                                <br/>
                            </div>

                        }
                        @Html.Hidden("pathToPreviewDoc", Model.PathToPreviewDoc)
                        @Html.Hidden("pathToOutputDoc", Model.PathToOutputDoc)
                        @Html.Hidden("pathToFormDoc", Model.PathToFormDoc)
                        <br/><br/>
                        <div class="d-flex justify-content-center">
                            <input asp-action="ServiceConstructorOnViewDoc" type="submit" id="shiiit" value="Отобразить документ"/>
                        </div>
                        <br/>
                        <div class="d-flex justify-content-center">
                            <input asp-action="ServiceConstructorOnSaveDoc" type="submit" class="btn" value="Сохранить документ"/>
                        </div>
                    </form>
                </div>
            }
        }
    </div>
        <script>
            function debugAll(nameView){
                $("div.word-container").find("span").each (function (index){
                    if((this).innerText === nameView){
                        $(this).addClass("blink")
                        setTimeout(() => {
                            $(this).removeClass("blink") 
                        }, 2000)
                    }
                })
            }
        </script>
        break;
    case "FilesInfo":
        <div name="form" class="login-form">
            <form asp-action="ServiceConstructorSaveFiles" method="post" class="form-horizontal">
                <fieldset name="nameTemplate" class="form-group">
                    <label >Имя файла Шаблона</label>
                    <input type="text" name="nameTemplate" placeholder="" autofocus required />
                </fieldset>

                <fieldset name="nameForm" class="form-group">
                    <label>Имя файла Бланка заявлений</label>
                    <input type="text" name="nameForm" placeholder="" required />
                </fieldset>
                
                @Html.Hidden("pathToPreviewDoc", Model.PathToPreviewDoc)
                @Html.Hidden("pathToOutputDoc", Model.PathToOutputDoc)
                @Html.Hidden("pathToFormDoc", Model.PathToFormDoc)
                
                <fieldset name="save" class="form-group">
                    <button class="btn" type="submit">Сохранить</button>
                </fieldset>
                
            </form>
        </div>
        break;
    case "ServiceInfo":
        <div  name="form" class="login-form">
            <form asp-action="ServiceConstructorSendService" method="post" class="form-horizontal">
                @Html.Hidden("templateName", Model.TemplateName)
                @Html.Hidden("formName", Model.FormName)
                <fieldset name="nameService" class="form-group">
                    <label>Название услуги</label>
                    <input type="text" name="nameService" placeholder="" autofocus required/>
                </fieldset>

                <fieldset name="descriptionService" class="form-group">
                    <label>Информация об услуге</label>
                    <textarea name="descriptionService"></textarea>
                </fieldset>

                <fieldset name="save" class="form-group">
                    <button class="btn" type="submit">Сохранить</button>
                </fieldset>
            </form>
        </div>
        break;
    case "Final":
        <div class="alert-success alert-box">
            <p>Услуга создана</p>
            <p style="margin: 0">Теперь вы можете ее добавить в подразделение в разделе со списком услуг</p>
        </div>
        break;
}